{
  "name": "metpack",
  "version": "0.0.1",
  "description": "Meteor Webpack",
  "main": "./lib/index.js",
  "bin": {
    "metpack": "./bin/metpack.js"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tomitrescak/meteor-webpack-react.git"
  },
  "keywords": [
    "Meteor",
    "Webpack"
  ],
  "author": "",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/tomitrescak/meteor-webpack-react/issues"
  },
  "homepage": "https://github.com/tomitrescak/meteor-webpack-react",
  "dependencies": {
    "classnames": "^2.1.3",
    "lodash": "^3.10.0",
    "react": "^0.13.3",
    "react-mixin": "^2.0.1",
    "babel": "^5.8.21",
    "babel-core": "^5.8.22",
    "babel-eslint": "^4.0.5",
    "babel-loader": "^5.1.2",
    "babel-plugin-react-transform": "^1.0.5",
    "core-js": "^1.0.0",
    "css-loader": "^0.15.3",
    "eslint-config-airbnb": "0.0.7",
    "eslint-plugin-react": "^3.2.2",
    "grunt": "^0.4.5",
    "grunt-cli": "^0.1.13",
    "karma": "^0.13.9",
    "karma-chrome-launcher": "^0.2.0",
    "karma-jasmine": "^0.2.2",
    "karma-sourcemap-loader": "^0.3.5",
    "karma-webpack": "^1.7.0",
    "node-libs-browser": "^0.5.2",
    "react-transform-catch-errors": "^1.0.0",
    "react-transform-hmr": "^1.0.0",
    "redbox-react": "^1.0.1",
    "regenerator": "^0.8.36",
    "shelljs": "^0.5.3",
    "source-map-support": "^0.3.2",
    "style-loader": "^0.12.3",
    "webpack": "^1.10.1",
    "webpack-dev-server": "^1.10.1"
  },
  "readme": "# meteor-webpack-react\n\nThis is a Meteor project skeleton where the client (in React) and server get built by Webpack.  In dev mode,\nwebpack-dev-server is used with [react-transform](https://github.com/gaearon/babel-plugin-react-transform).  There are a bunch of run and build scripts to make things more convenient.\n\nMeteor's builtin ES2015 support doesn't allow you to `import`(/`require`), but **with this project you can use all ES2015/ES7 features supported by Babel/corejs/regenerator on the client and server today**, thanks to Webpack.  There are even source maps on the server thanks to https://github.com/evanw/node-source-map-support!  \n\nThere is a port of the Meteor simple-todos tutorial to this stack on the `simple-todos` branch.\n\n## Advantages of packaging with Webpack instead of Meteor\n\n* `require`/ES2015 `import` let you avoid Meteor global variables/load order issues\n* `react-transform` reloads React components without reloading the entire page\n  when you make changes\n* If you `require` your styles with Webpack, it will also reload them without\n  reloading the entire page when you make changes to them\n* Using an npm module in the browser is as simple as `npm install` and `require`\n  * This puts a large part of the React ecosystem (which revolves around Webpack/npm)\n    at your fingertips\n* Other Webpack loaders are great too, for example:\n  * you can break up your CSS into one file per React component, and then `require`\n    them in your JSX files\n  * or if you want to use Sass, you can `require` the Sass files\n  * or you can use `url-loader` to `require` an image file and get a URL to stick in\n    an `<img>` tag\n* If you use Webpack for your server code too, both the server and the client can `require`\n  shared code.  This way you can avoid creating global variables for Meteor collections or\n  anything else\n\n## How it works\n\nThe `dev.js`, `prod.js`, and `deploy.js` scripts will run Webpack, and symbolically link the generated bundles\ninto the `meteor_core` directory.\n\nIn prod mode, `meteor_core` gets the webpack client and server bundles via the soft links `meteor_core/client/client.bundle.js` and `meteor_core/server/server.bundle.js`.  Two instances of `webpack --watch` are running, one to make the client bundle and one to make the server bundle.\n\nIn dev mode, both `webpack-dev-server` and `meteor_core` run simultaneously on different ports (9090 and 3000, respectively), and a `webpack --watch` is also running to compile and output the server code.  A script in `meteor_core/client/loadClientBundle.html` inserts a `<script>` tag linking to the bundle from webpack-dev-server via port 9090 on the page's host.  (It's a bit weird I know, but one can't have a relative URL to a different port, and just putting a script tag to `http://localhost:9090/...` wouldn't work if you're testing on separate device from your dev box).\n\n### Windows note\n\n`meteor_core/client/client.bundle.js` is a soft link to `webpack/assets/client.bundle.js`.  \n(Similarly for the server bundle.) I don't know\nif the soft link will work on Windows.  If not, you can just copy the bundle in, but *make sure\nto rename it to `main.js`* so that Meteor loads it after everything else.\n\n## Requirements\n\nThere have been dependency issues with old versions of Node and NPM.  Please try at least Node v0.10.36 and npm v1.4.28 before repording any issues about missing dependencies.\n\n## Running (dev mode)\n\n**Note:** make sure you are forwarding port 9090 (as well as the Meteor port) if you want to test on other devices via LAN.\n\n```\n> npm install\n> node dev.js\n```\nMake sure to wait for Meteor to say it's listening, for the client `webpack-dev-server` and server `webpack --watch` to print out module/bundle info.  The site won't work until all are ready.\n\n## Debugging/Profiling Server (dev mode)\n\n```\n> npm install -g node-inspector\n> npm install\n> node debug.js\n```\nThen visit `http://127.0.0.1:8080/debug?port=5858` in your browser.\n\n## Running (prod mode)\nThis runs the app as if it were in production, but it's still watching your files for changes.  You can Ctrl-C after it's finished starting up and use `./met deploy`, though.\n\n```\n> npm install\n> node prod.js\n```\nMake sure to wait for Meteor to say it's listening, and for the client and server `webpack --watch` processes to print out module/bundle info.  The site won't work until all are ready.\n\n\n## Deployment\n\nYou can set the project name in `projectName.js`.  It defaults to\nthe project folder name.\n\nThere is a deployment script that supports several common options:\n```\nnode deploy.js meteor.com\n```\nThe usual basic meteor.com deploy\n\n```\nnode deploy.js modulus\n```\nUses modulus (make sure to go into the deploy script and replace `your_app_proj_name` with a real value\n\n```\nnode deploy.js mup\n```\nSee `deploy.js` for some additional hints\n\n```\nnode deploy.js demeteorizer\n```\nBuilds with demeteorizer\n\n\n## Meteor Settings\n\nPut your settings in `settings/devel.json` & `settings/prod.json` and they will automatically load when running in development, production and build modes.\n\n\n## Running Meteor Commands\n\nAs a convenience you can run `./met` in the root directory to run the `meteor` command. However you can still `cd meteor_core` and then run `meteor` from that directory as well.\n\n```\n./met  --version\n./met search simple-schema\n```\n\n## Acknowledgements\n\n(if I've forgotten anyone let me know!)\n\nThanks to:\n* @AdamBrodzinski- for a lot of contributions (esp. deployment) and promotion\n* Luigi Maselli (@grigio) - for writing the first scripts and showing me how to deal with the Meteor vs. ES2015 Number polyfill issue\n* @jbbr - for presenting good workarounds for several issues\n",
  "readmeFilename": "README.md",
  "gitHead": "d792eea8540da609e449acaf6ae180f9c9b2cb9c",
  "_id": "metpack@0.0.1",
  "_shasum": "1c22cd2959a3b08816ecf46093966aa733f6b927",
  "_from": "../meteor-webpack-react-tomi"
}
